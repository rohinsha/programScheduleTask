{"remainingRequest":"/home/rohinsha/Desktop/programScheduleTask/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/rohinsha/Desktop/programScheduleTask/node_modules/primeng/components/table/table.js","dependencies":[{"path":"/home/rohinsha/Desktop/programScheduleTask/node_modules/primeng/components/table/table.js","mtime":1526558365000},{"path":"/home/rohinsha/Desktop/programScheduleTask/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rohinsha/Desktop/programScheduleTask/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar paginator_1 = require(\"../paginator/paginator\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar core_2 = require(\"@angular/core\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar TableService = /** @class */ /*@__PURE__*/ (function () {\n    function TableService() {\n        this.sortSource = new Subject_1.Subject();\n        this.selectionSource = new Subject_1.Subject();\n        this.contextMenuSource = new Subject_1.Subject();\n        this.valueSource = new Subject_1.Subject();\n        this.totalRecordsSource = new Subject_1.Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.valueSource$ = this.valueSource.asObservable();\n        this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    }\n    TableService.prototype.onSort = function (sortMeta) {\n        this.sortSource.next(sortMeta);\n    };\n    TableService.prototype.onSelectionChange = function () {\n        this.selectionSource.next();\n    };\n    TableService.prototype.onContextMenu = function (data) {\n        this.contextMenuSource.next(data);\n    };\n    TableService.prototype.onValueChange = function (value) {\n        this.valueSource.next(value);\n    };\n    TableService.prototype.onTotalRecordsChange = function (value) {\n        this.totalRecordsSource.next(value);\n    };\n    TableService = __decorate([\n        core_2.Injectable()\n    ], TableService);\n    return TableService;\n}());\nexports.TableService = TableService;\nvar Table = /** @class */ /*@__PURE__*/ (function () {\n    function Table(el, domHandler, objectUtils, zone, tableService) {\n        this.el = el;\n        this.domHandler = domHandler;\n        this.objectUtils = objectUtils;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.first = 0;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new core_1.EventEmitter();\n        this.contextMenuSelectionChange = new core_1.EventEmitter();\n        this.rowTrackBy = function (index, item) { return item; };\n        this.lazy = false;\n        this.compareSelectionBy = 'deepEquals';\n        this.csvSeparator = ',';\n        this.exportFilename = 'download';\n        this.filters = {};\n        this.filterDelay = 300;\n        this.expandedRowKeys = {};\n        this.rowExpandMode = 'multiple';\n        this.virtualScrollDelay = 500;\n        this.virtualRowHeight = 28;\n        this.columnResizeMode = 'fit';\n        this.loadingIcon = 'fa fa-spin fa-2x fa-circle-o-notch';\n        this.onRowSelect = new core_1.EventEmitter();\n        this.onRowUnselect = new core_1.EventEmitter();\n        this.onPage = new core_1.EventEmitter();\n        this.onSort = new core_1.EventEmitter();\n        this.onFilter = new core_1.EventEmitter();\n        this.onLazyLoad = new core_1.EventEmitter();\n        this.onRowExpand = new core_1.EventEmitter();\n        this.onRowCollapse = new core_1.EventEmitter();\n        this.onContextMenuSelect = new core_1.EventEmitter();\n        this.onColResize = new core_1.EventEmitter();\n        this.onColReorder = new core_1.EventEmitter();\n        this.onRowReorder = new core_1.EventEmitter();\n        this.onEditInit = new core_1.EventEmitter();\n        this.onEditComplete = new core_1.EventEmitter();\n        this.onEditCancel = new core_1.EventEmitter();\n        this.onHeaderCheckboxToggle = new core_1.EventEmitter();\n        this.sortFunction = new core_1.EventEmitter();\n        this._value = [];\n        this._totalRecords = 0;\n        this.selectionKeys = {};\n        this._sortOrder = 1;\n        this.filterConstraints = {\n            startsWith: function (value, filter) {\n                if (filter === undefined || filter === null || filter.trim() === '') {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                var filterValue = filter.toLowerCase();\n                return value.toString().toLowerCase().slice(0, filterValue.length) === filterValue;\n            },\n            contains: function (value, filter) {\n                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                return value.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n            },\n            endsWith: function (value, filter) {\n                if (filter === undefined || filter === null || filter.trim() === '') {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                var filterValue = filter.toString().toLowerCase();\n                return value.toString().toLowerCase().indexOf(filterValue, value.toString().length - filterValue.length) !== -1;\n            },\n            equals: function (value, filter) {\n                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                return value.toString().toLowerCase() == filter.toString().toLowerCase();\n            },\n            notEquals: function (value, filter) {\n                if (filter === undefined || filter === null || (typeof filter === 'string' && filter.trim() === '')) {\n                    return false;\n                }\n                if (value === undefined || value === null) {\n                    return true;\n                }\n                return value.toString().toLowerCase() != filter.toString().toLowerCase();\n            },\n            in: function (value, filter) {\n                if (filter === undefined || filter === null || filter.length === 0) {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                for (var i = 0; i < filter.length; i++) {\n                    if (filter[i] === value)\n                        return true;\n                }\n                return false;\n            },\n            lt: function (value, filter) {\n                if (filter === undefined || filter === null) {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                return value < filter;\n            },\n            gt: function (value, filter) {\n                if (filter === undefined || filter === null) {\n                    return true;\n                }\n                if (value === undefined || value === null) {\n                    return false;\n                }\n                return value > filter;\n            }\n        };\n    }\n    Table.prototype.ngOnInit = function () {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    };\n    Table.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'caption':\n                    _this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    _this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    _this.bodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    _this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    _this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    _this.colGroupTemplate = item.template;\n                    break;\n                case 'rowexpansion':\n                    _this.expandedRowTemplate = item.template;\n                    break;\n                case 'frozenrows':\n                    _this.frozenRowsTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    _this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    _this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    _this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    _this.frozenColGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    _this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    _this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    _this.paginatorRightTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    Object.defineProperty(Table.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (val) {\n            this._value = val;\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())\n                    this._filter();\n            }\n            if (this.virtualScroll && this.virtualScrollCallback) {\n                this.virtualScrollCallback();\n            }\n            this.tableService.onValueChange(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Table.prototype, \"totalRecords\", {\n        get: function () {\n            return this._totalRecords;\n        },\n        set: function (val) {\n            this._totalRecords = val;\n            this.tableService.onTotalRecordsChange(this._totalRecords);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Table.prototype, \"sortField\", {\n        get: function () {\n            return this._sortField;\n        },\n        set: function (val) {\n            this._sortField = val;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Table.prototype, \"sortOrder\", {\n        get: function () {\n            return this._sortOrder;\n        },\n        set: function (val) {\n            this._sortOrder = val;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Table.prototype, \"multiSortMeta\", {\n        get: function () {\n            return this._multiSortMeta;\n        },\n        set: function (val) {\n            this._multiSortMeta = val;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Table.prototype, \"selection\", {\n        get: function () {\n            return this._selection;\n        },\n        set: function (val) {\n            this._selection = val;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Table.prototype.updateSelectionKeys = function () {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (var _i = 0, _a = this._selection; _i < _a.length; _i++) {\n                    var data = _a[_i];\n                    this.selectionKeys[String(this.objectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(this.objectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    };\n    Table.prototype.onPageChange = function (event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onValueChange(this.value);\n    };\n    Table.prototype.sort = function (event) {\n        var originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            var sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    };\n    Table.prototype.sortSingle = function () {\n        var _this = this;\n        if (this.sortField && this.sortOrder) {\n            if (this.resetPageOnSort) {\n                this.first = 0;\n            }\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort(function (data1, data2) {\n                        var value1 = _this.objectUtils.resolveFieldData(data1, _this.sortField);\n                        var value2 = _this.objectUtils.resolveFieldData(data2, _this.sortField);\n                        var result = null;\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n                        return (_this.sortOrder * result);\n                    });\n                }\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            var sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    };\n    Table.prototype.sortMultiple = function () {\n        var _this = this;\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort(function (data1, data2) {\n                        return _this.multisortField(data1, data2, _this.multiSortMeta, 0);\n                    });\n                }\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    };\n    Table.prototype.multisortField = function (data1, data2, multiSortMeta, index) {\n        var value1 = this.objectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        var value2 = this.objectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        var result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n        return (multiSortMeta[index].order * result);\n    };\n    Table.prototype.getSortMeta = function (field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (var i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    };\n    Table.prototype.isSorted = function (field) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            var sorted = false;\n            if (this.multiSortMeta) {\n                for (var i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    };\n    Table.prototype.handleRowClick = function (event) {\n        var targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (this.domHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                this.domHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                var rowData = event.rowData;\n                var selected = this.isSelected(rowData);\n                var metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n                if (metaSelection) {\n                    var metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            var selectionIndex_1 = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_1; });\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection || [];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n                            this._selection = this.selection.concat([rowData]);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            var selectionIndex_2 = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_2; });\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? this.selection.concat([rowData]) : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    };\n    Table.prototype.handleRowTouchEnd = function (event) {\n        this.rowTouched = true;\n    };\n    Table.prototype.handleRowRightClick = function (event) {\n        if (this.contextMenu) {\n            this.contextMenuSelection = event.rowData;\n            this.contextMenuSelectionChange.emit(event.rowData);\n            this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, data: event.rowData });\n            this.contextMenu.show(event.originalEvent);\n            this.tableService.onContextMenu(event.rowData);\n        }\n    };\n    Table.prototype.selectRange = function (event, rowIndex) {\n        var rangeStart, rangeEnd;\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n        for (var i = rangeStart; i <= rangeEnd; i++) {\n            var rangeRowData = this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                this._selection = this.selection.concat([rangeRowData]);\n                var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n                this.onRowSelect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });\n            }\n        }\n        this.selectionChange.emit(this.selection);\n    };\n    Table.prototype.clearSelectionRange = function (event) {\n        var rangeStart, rangeEnd;\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        var _loop_1 = function (i) {\n            var rangeRowData = this_1.value[i];\n            var selectionIndex = this_1.findIndexInSelection(rangeRowData);\n            this_1._selection = this_1.selection.filter(function (val, i) { return i != selectionIndex; });\n            var dataKeyValue = this_1.dataKey ? String(this_1.objectUtils.resolveFieldData(rangeRowData, this_1.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this_1.selectionKeys[dataKeyValue];\n            }\n            this_1.onRowUnselect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });\n        };\n        var this_1 = this;\n        for (var i = rangeStart; i <= rangeEnd; i++) {\n            _loop_1(i);\n        }\n    };\n    Table.prototype.isSelected = function (rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[this.objectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n        return false;\n    };\n    Table.prototype.findIndexInSelection = function (rowData) {\n        var index = -1;\n        if (this.selection && this.selection.length) {\n            for (var i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    Table.prototype.toggleRowWithRadio = function (event, rowData) {\n        this.preventSelectionSetterPropagation = true;\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'radiobutton' });\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(this.objectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'radiobutton' });\n        }\n        this.tableService.onSelectionChange();\n    };\n    Table.prototype.toggleRowWithCheckbox = function (event, rowData) {\n        this.selection = this.selection || [];\n        var selected = this.isSelected(rowData);\n        var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n        if (selected) {\n            var selectionIndex_3 = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_3; });\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? this.selection.concat([rowData]) : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        this.tableService.onSelectionChange();\n    };\n    Table.prototype.toggleRowsWithCheckbox = function (event, check) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice() : this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    };\n    Table.prototype.equals = function (data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : this.objectUtils.equals(data1, data2, this.dataKey);\n    };\n    Table.prototype.filter = function (value, field, matchMode) {\n        var _this = this;\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        this.filterTimeout = setTimeout(function () {\n            if (!_this.isFilterBlank(value))\n                _this.filters[field] = { value: value, matchMode: matchMode };\n            else if (_this.filters[field])\n                delete _this.filters[field];\n            _this._filter();\n            _this.filterTimeout = null;\n        }, this.filterDelay);\n    };\n    Table.prototype.filterGlobal = function (value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    };\n    Table.prototype.isFilterBlank = function (filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    };\n    Table.prototype._filter = function () {\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                var globalFilterFieldsArray = void 0;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredValue = [];\n                for (var i = 0; i < this.value.length; i++) {\n                    var localMatch = true;\n                    var globalMatch = false;\n                    var localFiltered = false;\n                    for (var prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            var filterMeta = this.filters[prop];\n                            var filterField = prop;\n                            var filterValue = filterMeta.value;\n                            var filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            var dataFieldValue = this.objectUtils.resolveFieldData(this.value[i], filterField);\n                            var filterConstraint = this.filterConstraints[filterMatchMode];\n                            if (!filterConstraint(dataFieldValue, filterValue)) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (var j = 0; j < globalFilterFieldsArray.length; j++) {\n                            var globalFilterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            globalMatch = this.filterConstraints[this.filters['global'].matchMode](this.objectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value);\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    var matches = void 0;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n        this.tableService.onValueChange(this.value);\n    };\n    Table.prototype.hasFilter = function () {\n        var empty = true;\n        for (var prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    };\n    Table.prototype.createLazyLoadMetadata = function () {\n        return {\n            first: this.first,\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    };\n    Table.prototype.reset = function () {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredValue = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    };\n    Table.prototype.exportCSV = function (options) {\n        var _this = this;\n        var data = this.filteredValue || this.value;\n        var csv = '\\ufeff';\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n        //headers\n        for (var i = 0; i < this.columns.length; i++) {\n            var column = this.columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n                if (i < (this.columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n        //body\n        data.forEach(function (record, i) {\n            csv += '\\n';\n            for (var i_1 = 0; i_1 < _this.columns.length; i_1++) {\n                var column = _this.columns[i_1];\n                if (column.exportable !== false && column.field) {\n                    var cellData = _this.objectUtils.resolveFieldData(record, column.field);\n                    if (cellData != null) {\n                        if (_this.exportFunction) {\n                            cellData = _this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n                    csv += '\"' + cellData + '\"';\n                    if (i_1 < (_this.columns.length - 1)) {\n                        csv += _this.csvSeparator;\n                    }\n                }\n            }\n        });\n        var blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            var link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    };\n    Table.prototype.toggleRow = function (rowData, event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n        var dataKeyValue = String(this.objectUtils.resolveFieldData(rowData, this.dataKey));\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n            this.expandedRowKeys[dataKeyValue] = 1;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    };\n    Table.prototype.isRowExpanded = function (rowData) {\n        return this.expandedRowKeys[String(this.objectUtils.resolveFieldData(rowData, this.dataKey))] === 1;\n    };\n    Table.prototype.isSingleSelectionMode = function () {\n        return this.selectionMode === 'single';\n    };\n    Table.prototype.isMultipleSelectionMode = function () {\n        return this.selectionMode === 'multiple';\n    };\n    Table.prototype.onColumnResizeBegin = function (event) {\n        var containerLeft = this.domHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n    };\n    Table.prototype.onColumnResize = function (event) {\n        var containerLeft = this.domHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.domHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    };\n    Table.prototype.onColumnResizeEnd = function (event, column) {\n        var delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        var columnWidth = column.offsetWidth;\n        var newColumnWidth = columnWidth + delta;\n        var minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                var nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    var nextColumnWidth = nextColumn.offsetWidth - delta;\n                    var nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            var scrollableBodyTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-body-table');\n                            var scrollableHeaderTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-header-table');\n                            var scrollableFooterTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-footer-table');\n                            var resizeColumnIndex = this.domHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    var scrollableBodyTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-body-table');\n                    var scrollableHeaderTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-header-table');\n                    var scrollableFooterTable = this.domHandler.findSingle(this.el.nativeElement, 'table.ui-table-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    }\n                    var resizeColumnIndex = this.domHandler.index(column);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    var containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        this.domHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    };\n    Table.prototype.resizeColGroup = function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                var col = colGroup.children[resizeColumnIndex];\n                var nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    };\n    Table.prototype.onColumnDragStart = function (event, columnElement) {\n        this.reorderIconWidth = this.domHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = this.domHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    };\n    Table.prototype.onColumnDragEnter = function (event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            var containerOffset = this.domHandler.getOffset(this.containerViewChild.nativeElement);\n            var dropHeaderOffset = this.domHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                var targetLeft = dropHeaderOffset.left - containerOffset.left;\n                var targetTop = containerOffset.top - dropHeaderOffset.top;\n                var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    };\n    Table.prototype.onColumnDragLeave = function (event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    };\n    Table.prototype.onColumnDrop = function (event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            var dragIndex = this.domHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            var dropIndex = this.domHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            var allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop) {\n                this.objectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    };\n    Table.prototype.onRowDragStart = function (event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    };\n    Table.prototype.onRowDragOver = function (event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            var rowY = this.domHandler.getOffset(rowElement).top + this.domHandler.getWindowScrollTop();\n            var pageY = event.pageY;\n            var rowMidY = rowY + this.domHandler.getOuterHeight(rowElement) / 2;\n            var prevRowElement = rowElement.previousElementSibling;\n            if (pageY < rowMidY) {\n                this.domHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    this.domHandler.addClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    this.domHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    this.domHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    this.domHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n                this.droppedRowIndex = index + 1;\n                this.domHandler.addClass(rowElement, 'ui-table-dragpoint-bottom');\n            }\n        }\n    };\n    Table.prototype.onRowDragLeave = function (event, rowElement) {\n        var prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            this.domHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n        }\n        this.domHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n        this.domHandler.removeClass(rowElement, 'ui-table-dragpoint-top');\n    };\n    Table.prototype.onRowDragEnd = function (event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    };\n    Table.prototype.onRowDrop = function (event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            var dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            this.objectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: this.droppedRowIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    };\n    Table.prototype.handleVirtualScroll = function (event) {\n        var _this = this;\n        this.first = (event.page - 1) * this.rows;\n        this.virtualScrollCallback = event.callback;\n        this.zone.run(function () {\n            if (_this.virtualScrollTimer) {\n                clearTimeout(_this.virtualScrollTimer);\n            }\n            _this.virtualScrollTimer = setTimeout(function () {\n                _this.onLazyLoad.emit(_this.createLazyLoadMetadata());\n            }, _this.virtualScrollDelay);\n        });\n    };\n    Table.prototype.isEmpty = function () {\n        var data = this.filteredValue || this.value;\n        return data == null || data.length == 0;\n    };\n    Table.prototype.ngOnDestroy = function () {\n        this.editingCell = null;\n        this.initialized = null;\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Table.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Table.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Table.prototype, \"frozenValue\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"styleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"paginator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"rows\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"first\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"pageLinks\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Table.prototype, \"rowsPerPageOptions\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"alwaysShowPaginator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"paginatorPosition\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"paginatorDropdownAppendTo\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"defaultSortOrder\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"sortMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"resetPageOnSort\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"selectionMode\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"selectionChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"contextMenuSelection\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"contextMenuSelectionChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"dataKey\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"metaKeySelection\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Function)\n    ], Table.prototype, \"rowTrackBy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"lazy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"compareSelectionBy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"csvSeparator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"exportFilename\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"filters\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], Table.prototype, \"globalFilterFields\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"filterDelay\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"expandedRowKeys\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"rowExpandMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"scrollable\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"scrollHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"virtualScroll\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"virtualScrollDelay\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Table.prototype, \"virtualRowHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"frozenWidth\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"responsive\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"contextMenu\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"resizableColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"columnResizeMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"reorderableColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"loading\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Table.prototype, \"loadingIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"rowHover\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"customSort\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Table.prototype, \"autoLayout\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Table.prototype, \"exportFunction\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onRowSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onRowUnselect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onPage\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onSort\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onFilter\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onLazyLoad\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onRowExpand\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onRowCollapse\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onContextMenuSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onColResize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onColReorder\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onRowReorder\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onEditInit\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onEditComplete\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onEditCancel\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"onHeaderCheckboxToggle\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Table.prototype, \"sortFunction\", void 0);\n    __decorate([\n        core_1.ViewChild('container'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Table.prototype, \"containerViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('resizeHelper'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Table.prototype, \"resizeHelperViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('reorderIndicatorUp'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Table.prototype, \"reorderIndicatorUpViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('reorderIndicatorDown'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Table.prototype, \"reorderIndicatorDownViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('table'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Table.prototype, \"tableViewChild\", void 0);\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], Table.prototype, \"templates\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], Table.prototype, \"value\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], Table.prototype, \"totalRecords\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], Table.prototype, \"sortField\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], Table.prototype, \"sortOrder\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], Table.prototype, \"multiSortMeta\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], Table.prototype, \"selection\", null);\n    Table = __decorate([\n        core_1.Component({\n            selector: 'p-table',\n            template: \"\\n        <div #container [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\"\\n            [ngClass]=\\\"{'ui-table ui-widget': true, 'ui-table-responsive': responsive, 'ui-table-resizable': resizableColumns,\\n                'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\\n                'ui-table-hoverable-rows': (rowHover||selectionMode), 'ui-table-auto-layout': autoLayout}\\\">\\n            <div class=\\\"ui-table-loading ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-table-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'fa fa-spin fa-2x ' + loadingIcon\\\"></i>\\n            </div>\\n            <div *ngIf=\\\"captionTemplate\\\" class=\\\"ui-table-caption ui-widget-header\\\">\\n                <ng-container *ngTemplateOutlet=\\\"captionTemplate\\\"></ng-container>\\n            </div>\\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"ui-paginator-top\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"></p-paginator>\\n            \\n            <div class=\\\"ui-table-wrapper\\\" *ngIf=\\\"!scrollable\\\">\\n                <table #table>\\n                    <ng-container *ngTemplateOutlet=\\\"colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"ui-table-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"headerTemplate; context: {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                    <tfoot class=\\\"ui-table-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                    <tbody class=\\\"ui-table-tbody\\\" [pTableBody]=\\\"columns\\\" [pTableBodyTemplate]=\\\"bodyTemplate\\\"></tbody>\\n                </table>\\n            </div>\\n\\n            <div class=\\\"ui-table-scrollable-wrapper\\\" *ngIf=\\\"scrollable\\\">\\n               <div class=\\\"ui-table-frozen-view\\\" *ngIf=\\\"frozenColumns||frozenBodyTemplate\\\" [pScrollableView]=\\\"frozenColumns\\\" [frozen]=\\\"true\\\" [ngStyle]=\\\"{width: frozenWidth}\\\" [scrollHeight]=\\\"scrollHeight\\\"></div>\\n               <div [pScrollableView]=\\\"columns\\\" [frozen]=\\\"false\\\" [scrollHeight]=\\\"scrollHeight\\\"></div>\\n            </div>\\n            \\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"ui-paginator-bottom\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"></p-paginator>\\n            <div *ngIf=\\\"summaryTemplate\\\" class=\\\"ui-table-summary ui-widget-header\\\">\\n                <ng-container *ngTemplateOutlet=\\\"summaryTemplate\\\"></ng-container>\\n            </div>\\n\\n            <div #resizeHelper class=\\\"ui-column-resizer-helper ui-state-highlight\\\" style=\\\"display:none\\\" *ngIf=\\\"resizableColumns\\\"></div>\\n\\n            <span #reorderIndicatorUp class=\\\"fa fa-arrow-down ui-table-reorder-indicator-up\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n            <span #reorderIndicatorDown class=\\\"fa fa-arrow-up ui-table-reorder-indicator-down\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n        </div>\\n    \",\n            providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, TableService]\n        })\n    ], Table);\n    return Table;\n}());\nexports.Table = Table;\nvar TableBody = /** @class */ /*@__PURE__*/ (function () {\n    function TableBody(dt) {\n        this.dt = dt;\n    }\n    __decorate([\n        core_1.Input(\"pTableBody\"),\n        __metadata(\"design:type\", Array)\n    ], TableBody.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(\"pTableBodyTemplate\"),\n        __metadata(\"design:type\", core_1.TemplateRef)\n    ], TableBody.prototype, \"template\", void 0);\n    TableBody = __decorate([\n        core_1.Component({\n            selector: '[pTableBody]',\n            template: \"\\n        <ng-container *ngIf=\\\"!dt.expandedRowTemplate\\\">\\n            <ng-template ngFor let-rowData let-rowIndex=\\\"index\\\" [ngForOf]=\\\"dt.paginator ? ((dt.filteredValue||dt.value) | slice:(dt.lazy ? 0 : dt.first):((dt.lazy ? 0 : dt.first) + dt.rows)) : (dt.filteredValue||dt.value)\\\" [ngForTrackBy]=\\\"dt.rowTrackBy\\\">\\n                <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\\\"></ng-container>\\n            </ng-template>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"dt.expandedRowTemplate\\\">\\n            <ng-template ngFor let-rowData let-rowIndex=\\\"index\\\" [ngForOf]=\\\"dt.paginator ? ((dt.filteredValue||dt.value) | slice:(dt.lazy ? 0 : dt.first):((dt.lazy ? 0 : dt.first) + dt.rows)) : (dt.filteredValue||dt.value)\\\" [ngForTrackBy]=\\\"dt.rowTrackBy\\\">\\n                <ng-container *ngIf=\\\"dt.isRowExpanded(rowData); else collapsedrow\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: true}\\\"></ng-container>\\n                    <ng-container *ngTemplateOutlet=\\\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\\\"></ng-container>\\n                </ng-container>\\n                <ng-template #collapsedrow>\\n                    <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, expanded: false, columns: columns}\\\"></ng-container>\\n                </ng-template>\\n            </ng-template>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"dt.isEmpty()\\\">\\n            <ng-container *ngTemplateOutlet=\\\"dt.emptyMessageTemplate; context: {$implicit: columns}\\\"></ng-container>\\n        </ng-container>\\n    \"\n        })\n    ], TableBody);\n    return TableBody;\n}());\nexports.TableBody = TableBody;\nvar ScrollableView = /** @class */ /*@__PURE__*/ (function () {\n    function ScrollableView(dt, el, domHandler, zone) {\n        var _this = this;\n        this.dt = dt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n        this.subscription = this.dt.tableService.valueSource$.subscribe(function () {\n            _this.zone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    _this.alignScrollBar();\n                }, 50);\n            });\n        });\n        if (this.dt.virtualScroll) {\n            this.totalRecordsSubscription = this.dt.tableService.totalRecordsSource$.subscribe(function () {\n                _this.zone.runOutsideAngular(function () {\n                    setTimeout(function () {\n                        _this.setVirtualScrollerHeight();\n                    }, 50);\n                });\n            });\n        }\n        this.initialized = false;\n    }\n    Object.defineProperty(ScrollableView.prototype, \"scrollHeight\", {\n        get: function () {\n            return this._scrollHeight;\n        },\n        set: function (val) {\n            this._scrollHeight = val;\n            this.setScrollHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScrollableView.prototype.ngAfterViewChecked = function () {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    };\n    ScrollableView.prototype.ngAfterViewInit = function () {\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                this.domHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');\n            }\n            if (this.dt.frozenWidth) {\n                this.el.nativeElement.style.left = this.dt.frozenWidth;\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.dt.frozenWidth + ')';\n            }\n            var frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = this.domHandler.findSingle(frozenView, '.ui-table-scrollable-body');\n            }\n        }\n        else {\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = this.domHandler.calculateScrollbarWidth() + 'px';\n        }\n        if (this.dt.virtualScroll) {\n            this.setVirtualScrollerHeight();\n        }\n    };\n    ScrollableView.prototype.bindEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            var scrollBarWidth = _this.domHandler.calculateScrollbarWidth();\n            if (_this.scrollHeaderViewChild && _this.scrollHeaderViewChild.nativeElement) {\n                _this.headerScrollListener = _this.onHeaderScroll.bind(_this);\n                _this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', _this.headerScrollListener);\n            }\n            if (_this.scrollFooterViewChild && _this.scrollFooterViewChild.nativeElement) {\n                _this.footerScrollListener = _this.onFooterScroll.bind(_this);\n                _this.scrollFooterViewChild.nativeElement.addEventListener('scroll', _this.footerScrollListener);\n            }\n            if (!_this.frozen) {\n                _this.bodyScrollListener = _this.onBodyScroll.bind(_this);\n                _this.scrollBodyViewChild.nativeElement.addEventListener('scroll', _this.bodyScrollListener);\n            }\n        });\n    };\n    ScrollableView.prototype.unbindEvents = function () {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n    };\n    ScrollableView.prototype.onHeaderScroll = function (event) {\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\n    };\n    ScrollableView.prototype.onFooterScroll = function (event) {\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\n    };\n    ScrollableView.prototype.onBodyScroll = function (event) {\n        var _this = this;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n        if (this.dt.virtualScroll) {\n            var viewport = this.domHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n            var tableHeight = this.domHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\n            var pageHeight_1 = this.dt.virtualRowHeight * this.dt.rows;\n            var virtualTableHeight = this.domHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\n            var pageCount = (virtualTableHeight / pageHeight_1) || 1;\n            var scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top || '0';\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) || (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\n                var page_1 = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\n                this.dt.handleVirtualScroll({\n                    page: page_1,\n                    callback: function () {\n                        _this.scrollTableViewChild.nativeElement.style.top = ((page_1 - 1) * pageHeight_1) + 'px';\n                        if (_this.frozenSiblingBody) {\n                            _this.frozenSiblingBody.children[0].style.top = _this.scrollTableViewChild.nativeElement.style.top;\n                        }\n                    }\n                });\n            }\n        }\n    };\n    ScrollableView.prototype.setScrollHeight = function () {\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if (this.scrollHeight.indexOf('%') !== -1) {\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px'; //temporary height to calculate static height\n                var containerHeight = this.domHandler.getOuterHeight(this.dt.el.nativeElement.children[0]);\n                var relativeHeight = this.domHandler.getOuterHeight(this.dt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                var staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n                var scrollBodyHeight = (relativeHeight - staticHeight);\n                if (this.frozen) {\n                    scrollBodyHeight -= this.domHandler.calculateScrollbarWidth();\n                }\n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {\n                if (this.frozen)\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - this.domHandler.calculateScrollbarWidth()) + 'px';\n                else\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\n            }\n        }\n    };\n    ScrollableView.prototype.setVirtualScrollerHeight = function () {\n        if (this.virtualScrollerViewChild.nativeElement) {\n            this.virtualScrollerViewChild.nativeElement.style.height = this.dt.totalRecords * this.dt.virtualRowHeight + 'px';\n        }\n    };\n    ScrollableView.prototype.hasVerticalOverflow = function () {\n        return this.domHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > this.domHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    };\n    ScrollableView.prototype.alignScrollBar = function () {\n        if (!this.frozen) {\n            var scrollBarWidth = this.hasVerticalOverflow() ? this.domHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    };\n    ScrollableView.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.totalRecordsSubscription) {\n            this.totalRecordsSubscription.unsubscribe();\n        }\n        this.initialized = false;\n    };\n    __decorate([\n        core_1.Input(\"pScrollableView\"),\n        __metadata(\"design:type\", Array)\n    ], ScrollableView.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ScrollableView.prototype, \"frozen\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollHeader'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollHeaderViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollHeaderBox'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollHeaderBoxViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollBody'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollBodyViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollTable'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollTableViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollFooter'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollFooterViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollFooterBox'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"scrollFooterBoxViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('virtualScroller'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], ScrollableView.prototype, \"virtualScrollerViewChild\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], ScrollableView.prototype, \"scrollHeight\", null);\n    ScrollableView = __decorate([\n        core_1.Component({\n            selector: '[pScrollableView]',\n            template: \"\\n        <div #scrollHeader class=\\\"ui-table-scrollable-header ui-widget-header\\\">\\n            <div #scrollHeaderBox class=\\\"ui-table-scrollable-header-box\\\">\\n                <table class=\\\"ui-table-scrollable-header-table\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"ui-table-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                    <tbody class=\\\"ui-table-tbody\\\">\\n                        <ng-template ngFor let-rowData let-rowIndex=\\\"index\\\" [ngForOf]=\\\"dt.frozenValue\\\" [ngForTrackBy]=\\\"dt.rowTrackBy\\\">\\n                            <ng-container *ngTemplateOutlet=\\\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\\\"></ng-container>\\n                        </ng-template>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </div>\\n        <div #scrollBody class=\\\"ui-table-scrollable-body\\\">\\n            <table #scrollTable [ngClass]=\\\"{'ui-table-virtual-table': dt.virtualScroll}\\\" class=\\\"ui-table-scrollable-body-table\\\">\\n                <ng-container *ngTemplateOutlet=\\\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                <tbody class=\\\"ui-table-tbody\\\" [pTableBody]=\\\"columns\\\" [pTableBodyTemplate]=\\\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\\\"></tbody>\\n            </table>\\n            <div #virtualScroller class=\\\"ui-table-virtual-scroller\\\"></div>\\n        </div>\\n        <div #scrollFooter *ngIf=\\\"dt.footerTemplate\\\" class=\\\"ui-table-scrollable-footer ui-widget-header\\\">\\n            <div #scrollFooterBox class=\\\"ui-table-scrollable-footer-box\\\">\\n                <table class=\\\"ui-table-scrollable-footer-table\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <tfoot class=\\\"ui-table-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], ScrollableView);\n    return ScrollableView;\n}());\nexports.ScrollableView = ScrollableView;\nvar SortableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function SortableColumn(dt, domHandler) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(function (sortMeta) {\n                _this.updateSortState();\n            });\n        }\n    }\n    SortableColumn.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    };\n    SortableColumn.prototype.updateSortState = function () {\n        this.sorted = this.dt.isSorted(this.field);\n    };\n    SortableColumn.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            this.domHandler.clearSelection();\n        }\n    };\n    SortableColumn.prototype.isEnabled = function () {\n        return this.pSortableColumnDisabled !== true;\n    };\n    SortableColumn.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"pSortableColumn\"),\n        __metadata(\"design:type\", String)\n    ], SortableColumn.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SortableColumn.prototype, \"pSortableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [MouseEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], SortableColumn.prototype, \"onClick\", null);\n    SortableColumn = __decorate([\n        core_1.Directive({\n            selector: '[pSortableColumn]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-sortable-column]': 'true',\n                '[class.ui-state-highlight]': 'sorted'\n            }\n        })\n    ], SortableColumn);\n    return SortableColumn;\n}());\nexports.SortableColumn = SortableColumn;\nvar SortIcon = /** @class */ /*@__PURE__*/ (function () {\n    function SortIcon(dt) {\n        var _this = this;\n        this.dt = dt;\n        this.subscription = this.dt.tableService.sortSource$.subscribe(function (sortMeta) {\n            _this.updateSortState();\n        });\n    }\n    SortIcon.prototype.ngOnInit = function () {\n        this.updateSortState();\n    };\n    SortIcon.prototype.onClick = function (event) {\n        event.preventDefault();\n    };\n    SortIcon.prototype.updateSortState = function () {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            var sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    };\n    SortIcon.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], SortIcon.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], SortIcon.prototype, \"ariaLabelDesc\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], SortIcon.prototype, \"ariaLabelAsc\", void 0);\n    SortIcon = __decorate([\n        core_1.Component({\n            selector: 'p-sortIcon',\n            template: \"\\n        <a href=\\\"#\\\" (click)=\\\"onClick($event)\\\" [attr.aria-label]=\\\" sortOrder === 1 ? ariaLabelAsc : sortOrder === -1 ? ariaLabelDesc : '' \\\">\\n            <i class=\\\"ui-sortable-column-icon fa fa-fw fa-sort\\\" [ngClass]=\\\"{'fa-sort-asc': sortOrder === 1, 'fa-sort-desc': sortOrder === -1}\\\"></i>\\n        </a>\\n    \"\n        })\n    ], SortIcon);\n    return SortIcon;\n}());\nexports.SortIcon = SortIcon;\nvar SelectableRow = /** @class */ /*@__PURE__*/ (function () {\n    function SelectableRow(dt, domHandler, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(function () {\n                _this.selected = _this.dt.isSelected(_this.data);\n            });\n        }\n    }\n    SelectableRow.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    };\n    SelectableRow.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    };\n    SelectableRow.prototype.onTouchEnd = function (event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    };\n    SelectableRow.prototype.isEnabled = function () {\n        return this.pSelectableRowDisabled !== true;\n    };\n    SelectableRow.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"pSelectableRow\"),\n        __metadata(\"design:type\", Object)\n    ], SelectableRow.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(\"pSelectableRowIndex\"),\n        __metadata(\"design:type\", Number)\n    ], SelectableRow.prototype, \"index\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SelectableRow.prototype, \"pSelectableRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], SelectableRow.prototype, \"onClick\", null);\n    __decorate([\n        core_1.HostListener('touchend', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], SelectableRow.prototype, \"onTouchEnd\", null);\n    SelectableRow = __decorate([\n        core_1.Directive({\n            selector: '[pSelectableRow]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-state-highlight]': 'selected'\n            }\n        })\n    ], SelectableRow);\n    return SelectableRow;\n}());\nexports.SelectableRow = SelectableRow;\nvar SelectableRowDblClick = /** @class */ /*@__PURE__*/ (function () {\n    function SelectableRowDblClick(dt, domHandler, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(function () {\n                _this.selected = _this.dt.isSelected(_this.data);\n            });\n        }\n    }\n    SelectableRowDblClick.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    };\n    SelectableRowDblClick.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    };\n    SelectableRowDblClick.prototype.isEnabled = function () {\n        return this.pSelectableRowDisabled !== true;\n    };\n    SelectableRowDblClick.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"pSelectableRowDblClick\"),\n        __metadata(\"design:type\", Object)\n    ], SelectableRowDblClick.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(\"pSelectableRowIndex\"),\n        __metadata(\"design:type\", Number)\n    ], SelectableRowDblClick.prototype, \"index\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], SelectableRowDblClick.prototype, \"pSelectableRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('dblclick', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], SelectableRowDblClick.prototype, \"onClick\", null);\n    SelectableRowDblClick = __decorate([\n        core_1.Directive({\n            selector: '[pSelectableRowDblClick]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-state-highlight]': 'selected'\n            }\n        })\n    ], SelectableRowDblClick);\n    return SelectableRowDblClick;\n}());\nexports.SelectableRowDblClick = SelectableRowDblClick;\nvar ContextMenuRow = /** @class */ /*@__PURE__*/ (function () {\n    function ContextMenuRow(dt, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe(function (data) {\n                _this.selected = _this.dt.equals(_this.data, data);\n            });\n        }\n    }\n    ContextMenuRow.prototype.onContextMenu = function (event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data\n            });\n            event.preventDefault();\n        }\n    };\n    ContextMenuRow.prototype.isEnabled = function () {\n        return this.pContextMenuRowDisabled !== true;\n    };\n    ContextMenuRow.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"pContextMenuRow\"),\n        __metadata(\"design:type\", Object)\n    ], ContextMenuRow.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ContextMenuRow.prototype, \"pContextMenuRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('contextmenu', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], ContextMenuRow.prototype, \"onContextMenu\", null);\n    ContextMenuRow = __decorate([\n        core_1.Directive({\n            selector: '[pContextMenuRow]',\n            host: {\n                '[class.ui-contextmenu-selected]': 'selected'\n            }\n        })\n    ], ContextMenuRow);\n    return ContextMenuRow;\n}());\nexports.ContextMenuRow = ContextMenuRow;\nvar RowToggler = /** @class */ /*@__PURE__*/ (function () {\n    function RowToggler(dt) {\n        this.dt = dt;\n    }\n    RowToggler.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    };\n    RowToggler.prototype.isEnabled = function () {\n        return this.pRowTogglerDisabled !== true;\n    };\n    __decorate([\n        core_1.Input('pRowToggler'),\n        __metadata(\"design:type\", Object)\n    ], RowToggler.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], RowToggler.prototype, \"pRowTogglerDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], RowToggler.prototype, \"onClick\", null);\n    RowToggler = __decorate([\n        core_1.Directive({\n            selector: '[pRowToggler]'\n        })\n    ], RowToggler);\n    return RowToggler;\n}());\nexports.RowToggler = RowToggler;\nvar ResizableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function ResizableColumn(dt, el, domHandler, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    ResizableColumn.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.isEnabled()) {\n            this.domHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(function () {\n                _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);\n                _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);\n            });\n        }\n    };\n    ResizableColumn.prototype.bindDocumentEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.documentMouseMoveListener = _this.onDocumentMouseMove.bind(_this);\n            document.addEventListener('mousemove', _this.documentMouseMoveListener);\n            _this.documentMouseUpListener = _this.onDocumentMouseUp.bind(_this);\n            document.addEventListener('mouseup', _this.documentMouseUpListener);\n        });\n    };\n    ResizableColumn.prototype.unbindDocumentEvents = function () {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    };\n    ResizableColumn.prototype.onMouseDown = function (event) {\n        this.dt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    };\n    ResizableColumn.prototype.onDocumentMouseMove = function (event) {\n        this.dt.onColumnResize(event);\n    };\n    ResizableColumn.prototype.onDocumentMouseUp = function (event) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    };\n    ResizableColumn.prototype.isEnabled = function () {\n        return this.pResizableColumnDisabled !== true;\n    };\n    ResizableColumn.prototype.ngOnDestroy = function () {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ResizableColumn.prototype, \"pResizableColumnDisabled\", void 0);\n    ResizableColumn = __decorate([\n        core_1.Directive({\n            selector: '[pResizableColumn]'\n        })\n    ], ResizableColumn);\n    return ResizableColumn;\n}());\nexports.ResizableColumn = ResizableColumn;\nvar ReorderableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function ReorderableColumn(dt, el, domHandler, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    ReorderableColumn.prototype.ngAfterViewInit = function () {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    };\n    ReorderableColumn.prototype.bindEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.mouseDownListener = _this.onMouseDown.bind(_this);\n            _this.el.nativeElement.addEventListener('mousedown', _this.mouseDownListener);\n            _this.dragStartListener = _this.onDragStart.bind(_this);\n            _this.el.nativeElement.addEventListener('dragstart', _this.dragStartListener);\n            _this.dragOverListener = _this.onDragEnter.bind(_this);\n            _this.el.nativeElement.addEventListener('dragover', _this.dragOverListener);\n            _this.dragEnterListener = _this.onDragEnter.bind(_this);\n            _this.el.nativeElement.addEventListener('dragenter', _this.dragEnterListener);\n            _this.dragLeaveListener = _this.onDragLeave.bind(_this);\n            _this.el.nativeElement.addEventListener('dragleave', _this.dragLeaveListener);\n        });\n    };\n    ReorderableColumn.prototype.unbindEvents = function () {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    };\n    ReorderableColumn.prototype.onMouseDown = function (event) {\n        if (event.target.nodeName === 'INPUT' || this.domHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    };\n    ReorderableColumn.prototype.onDragStart = function (event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    };\n    ReorderableColumn.prototype.onDragOver = function (event) {\n        event.preventDefault();\n    };\n    ReorderableColumn.prototype.onDragEnter = function (event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    };\n    ReorderableColumn.prototype.onDragLeave = function (event) {\n        this.dt.onColumnDragLeave(event);\n    };\n    ReorderableColumn.prototype.onDrop = function (event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    };\n    ReorderableColumn.prototype.isEnabled = function () {\n        return this.pReorderableColumnDisabled !== true;\n    };\n    ReorderableColumn.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ReorderableColumn.prototype, \"pReorderableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('drop', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], ReorderableColumn.prototype, \"onDrop\", null);\n    ReorderableColumn = __decorate([\n        core_1.Directive({\n            selector: '[pReorderableColumn]'\n        })\n    ], ReorderableColumn);\n    return ReorderableColumn;\n}());\nexports.ReorderableColumn = ReorderableColumn;\nvar EditableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function EditableColumn(dt, el, domHandler, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    EditableColumn.prototype.ngAfterViewInit = function () {\n        if (this.isEnabled()) {\n            this.domHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    };\n    EditableColumn.prototype.isValid = function () {\n        return (this.dt.editingCell && this.domHandler.find(this.dt.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    };\n    EditableColumn.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.isValid()) {\n                        return;\n                    }\n                    this.domHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    };\n    EditableColumn.prototype.openCell = function () {\n        var _this = this;\n        this.dt.editingCell = this.el.nativeElement;\n        this.domHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.dt.onEditInit.emit({ field: this.field, data: this.data });\n        this.zone.runOutsideAngular(function () {\n            setTimeout(function () {\n                var focusable = _this.domHandler.findSingle(_this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    };\n    EditableColumn.prototype.onKeyDown = function (event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.isValid()) {\n                    this.domHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n                    this.dt.editingCell = null;\n                    this.dt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.keyCode == 27) {\n                if (this.isValid()) {\n                    this.domHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n                    this.dt.editingCell = null;\n                    this.dt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.keyCode == 9) {\n                this.dt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    };\n    EditableColumn.prototype.findCell = function (element) {\n        if (element) {\n            var cell = element;\n            while (cell && !this.domHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    };\n    EditableColumn.prototype.moveToPreviousCell = function (event) {\n        var currentCell = this.findCell(event.target);\n        var row = currentCell.parentElement;\n        var targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            this.domHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    };\n    EditableColumn.prototype.moveToNextCell = function (event) {\n        var currentCell = this.findCell(event.target);\n        var row = currentCell.parentElement;\n        var targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            this.domHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    };\n    EditableColumn.prototype.findPreviousEditableColumn = function (cell) {\n        var prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            var previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (this.domHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    };\n    EditableColumn.prototype.findNextEditableColumn = function (cell) {\n        var nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            var nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (this.domHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    };\n    EditableColumn.prototype.isEnabled = function () {\n        return this.pEditableColumnDisabled !== true;\n    };\n    __decorate([\n        core_1.Input(\"pEditableColumn\"),\n        __metadata(\"design:type\", Object)\n    ], EditableColumn.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(\"pEditableColumnField\"),\n        __metadata(\"design:type\", Object)\n    ], EditableColumn.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], EditableColumn.prototype, \"pEditableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [MouseEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], EditableColumn.prototype, \"onClick\", null);\n    __decorate([\n        core_1.HostListener('keydown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [KeyboardEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], EditableColumn.prototype, \"onKeyDown\", null);\n    EditableColumn = __decorate([\n        core_1.Directive({\n            selector: '[pEditableColumn]'\n        })\n    ], EditableColumn);\n    return EditableColumn;\n}());\nexports.EditableColumn = EditableColumn;\nvar CellEditor = /** @class */ /*@__PURE__*/ (function () {\n    function CellEditor(dt, editableColumn) {\n        this.dt = dt;\n        this.editableColumn = editableColumn;\n    }\n    CellEditor.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'input':\n                    _this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    _this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], CellEditor.prototype, \"templates\", void 0);\n    CellEditor = __decorate([\n        core_1.Component({\n            selector: 'p-cellEditor',\n            template: \"\\n        <ng-container *ngIf=\\\"dt.editingCell === editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"inputTemplate\\\"></ng-container>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"!dt.editingCell || dt.editingCell !== editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"outputTemplate\\\"></ng-container>\\n        </ng-container>\\n    \"\n        })\n    ], CellEditor);\n    return CellEditor;\n}());\nexports.CellEditor = CellEditor;\nvar TableRadioButton = /** @class */ /*@__PURE__*/ (function () {\n    function TableRadioButton(dt, domHandler, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(function () {\n            _this.checked = _this.dt.isSelected(_this.value);\n        });\n    }\n    TableRadioButton.prototype.ngOnInit = function () {\n        this.checked = this.dt.isSelected(this.value);\n    };\n    TableRadioButton.prototype.onClick = function (event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio(event, this.value);\n        }\n        this.domHandler.clearSelection();\n    };\n    TableRadioButton.prototype.onFocus = function () {\n        this.domHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableRadioButton.prototype.onBlur = function () {\n        this.domHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableRadioButton.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TableRadioButton.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TableRadioButton.prototype, \"value\", void 0);\n    __decorate([\n        core_1.ViewChild('box'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TableRadioButton.prototype, \"boxViewChild\", void 0);\n    TableRadioButton = __decorate([\n        core_1.Component({\n            selector: 'p-tableRadioButton',\n            template: \"\\n        <div class=\\\"ui-radiobutton ui-widget\\\" (click)=\\\"onClick($event)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input type=\\\"radio\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'ui-radiobutton-box ui-widget ui-state-default':true,\\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\\\">\\n                <span class=\\\"ui-radiobutton-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-circle':checked}\\\"></span>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TableRadioButton);\n    return TableRadioButton;\n}());\nexports.TableRadioButton = TableRadioButton;\nvar TableCheckbox = /** @class */ /*@__PURE__*/ (function () {\n    function TableCheckbox(dt, domHandler, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(function () {\n            _this.checked = _this.dt.isSelected(_this.value);\n        });\n    }\n    TableCheckbox.prototype.ngOnInit = function () {\n        this.checked = this.dt.isSelected(this.value);\n    };\n    TableCheckbox.prototype.onClick = function (event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox(event, this.value);\n        }\n        this.domHandler.clearSelection();\n    };\n    TableCheckbox.prototype.onFocus = function () {\n        this.domHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableCheckbox.prototype.onBlur = function () {\n        this.domHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableCheckbox.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TableCheckbox.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TableCheckbox.prototype, \"value\", void 0);\n    __decorate([\n        core_1.ViewChild('box'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TableCheckbox.prototype, \"boxViewChild\", void 0);\n    TableCheckbox = __decorate([\n        core_1.Component({\n            selector: 'p-tableCheckbox',\n            template: \"\\n        <div class=\\\"ui-chkbox ui-widget\\\" (click)=\\\"onClick($event)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'ui-chkbox-box ui-widget ui-state-default':true,\\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\\\">\\n                <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':checked}\\\"></span>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TableCheckbox);\n    return TableCheckbox;\n}());\nexports.TableCheckbox = TableCheckbox;\nvar TableHeaderCheckbox = /** @class */ /*@__PURE__*/ (function () {\n    function TableHeaderCheckbox(dt, domHandler, tableService) {\n        var _this = this;\n        this.dt = dt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(function () {\n            _this.checked = _this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(function () {\n            _this.checked = _this.updateCheckedState();\n        });\n    }\n    TableHeaderCheckbox.prototype.ngOnInit = function () {\n        this.checked = this.updateCheckedState();\n    };\n    TableHeaderCheckbox.prototype.onClick = function (event, checked) {\n        if (this.dt.value && this.dt.value.length > 0) {\n            this.dt.toggleRowsWithCheckbox(event, !checked);\n        }\n        this.domHandler.clearSelection();\n    };\n    TableHeaderCheckbox.prototype.onFocus = function () {\n        this.domHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableHeaderCheckbox.prototype.onBlur = function () {\n        this.domHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TableHeaderCheckbox.prototype.ngOnDestroy = function () {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    };\n    TableHeaderCheckbox.prototype.updateCheckedState = function () {\n        var val = this.dt.filteredValue || this.dt.value;\n        return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n    };\n    __decorate([\n        core_1.ViewChild('box'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TableHeaderCheckbox.prototype, \"boxViewChild\", void 0);\n    TableHeaderCheckbox = __decorate([\n        core_1.Component({\n            selector: 'p-tableHeaderCheckbox',\n            template: \"\\n        <div class=\\\"ui-chkbox ui-widget\\\" (click)=\\\"onClick($event, cb.checked)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #cb type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\" [disabled]=\\\"!dt.value || dt.value.length === 0\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'ui-chkbox-box ui-widget ui-state-default':true,\\n                'ui-state-active':checked, 'ui-state-disabled': (!dt.value || dt.value.length === 0)}\\\">\\n                <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'fa fa-check':checked}\\\"></span>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TableHeaderCheckbox);\n    return TableHeaderCheckbox;\n}());\nexports.TableHeaderCheckbox = TableHeaderCheckbox;\nvar ReorderableRowHandle = /** @class */ /*@__PURE__*/ (function () {\n    function ReorderableRowHandle(el, domHandler) {\n        this.el = el;\n        this.domHandler = domHandler;\n    }\n    ReorderableRowHandle.prototype.ngAfterViewInit = function () {\n        this.domHandler.addClass(this.el.nativeElement, 'ui-table-reorderablerow-handle');\n    };\n    __decorate([\n        core_1.Input(\"pReorderableRowHandle\"),\n        __metadata(\"design:type\", Number)\n    ], ReorderableRowHandle.prototype, \"index\", void 0);\n    ReorderableRowHandle = __decorate([\n        core_1.Directive({\n            selector: '[pReorderableRowHandle]'\n        })\n    ], ReorderableRowHandle);\n    return ReorderableRowHandle;\n}());\nexports.ReorderableRowHandle = ReorderableRowHandle;\nvar ReorderableRow = /** @class */ /*@__PURE__*/ (function () {\n    function ReorderableRow(dt, el, domHandler, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    ReorderableRow.prototype.ngAfterViewInit = function () {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    };\n    ReorderableRow.prototype.bindEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.mouseDownListener = _this.onMouseDown.bind(_this);\n            _this.el.nativeElement.addEventListener('mousedown', _this.mouseDownListener);\n            _this.dragStartListener = _this.onDragStart.bind(_this);\n            _this.el.nativeElement.addEventListener('dragstart', _this.dragStartListener);\n            _this.dragEndListener = _this.onDragEnd.bind(_this);\n            _this.el.nativeElement.addEventListener('dragend', _this.dragEndListener);\n            _this.dragOverListener = _this.onDragOver.bind(_this);\n            _this.el.nativeElement.addEventListener('dragover', _this.dragOverListener);\n            _this.dragLeaveListener = _this.onDragLeave.bind(_this);\n            _this.el.nativeElement.addEventListener('dragleave', _this.dragLeaveListener);\n        });\n    };\n    ReorderableRow.prototype.unbindEvents = function () {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    };\n    ReorderableRow.prototype.onMouseDown = function (event) {\n        if (this.domHandler.hasClass(event.target, 'ui-table-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    };\n    ReorderableRow.prototype.onDragStart = function (event) {\n        this.dt.onRowDragStart(event, this.index);\n    };\n    ReorderableRow.prototype.onDragEnd = function (event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    };\n    ReorderableRow.prototype.onDragOver = function (event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    };\n    ReorderableRow.prototype.onDragLeave = function (event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    };\n    ReorderableRow.prototype.isEnabled = function () {\n        return this.pReorderableRowDisabled !== true;\n    };\n    ReorderableRow.prototype.onDrop = function (event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n        event.preventDefault();\n    };\n    __decorate([\n        core_1.Input(\"pReorderableRow\"),\n        __metadata(\"design:type\", Number)\n    ], ReorderableRow.prototype, \"index\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ReorderableRow.prototype, \"pReorderableRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('drop', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], ReorderableRow.prototype, \"onDrop\", null);\n    ReorderableRow = __decorate([\n        core_1.Directive({\n            selector: '[pReorderableRow]'\n        })\n    ], ReorderableRow);\n    return ReorderableRow;\n}());\nexports.ReorderableRow = ReorderableRow;\nvar TableModule = /** @class */ /*@__PURE__*/ (function () {\n    function TableModule() {\n    }\n    TableModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, paginator_1.PaginatorModule],\n            exports: [Table, shared_1.SharedModule, SortableColumn, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick],\n            declarations: [Table, SortableColumn, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, ScrollableView, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick]\n        })\n    ], TableModule);\n    return TableModule;\n}());\nexports.TableModule = TableModule;\n",null]}